/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.92.1
  Forc version: 0.61.2
  Fuel-Core version: 0.31.0
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Enum, Vec } from "./common";

export enum ErrorInput { AlreadyInitialized = 'AlreadyInitialized', Paused = 'Paused', Unauthorized = 'Unauthorized', InsufficientReserves = 'InsufficientReserves', NotLiquidatable = 'NotLiquidatable', NotForSale = 'NotForSale', TooMuchSlippage = 'TooMuchSlippage', SupplyCapExceeded = 'SupplyCapExceeded', NotCollateralized = 'NotCollateralized', BorrowTooSmall = 'BorrowTooSmall', NotPermitted = 'NotPermitted', InvalidPayment = 'InvalidPayment', UnknownAsset = 'UnknownAsset', DebuggingDisabled = 'DebuggingDisabled' };
export enum ErrorOutput { AlreadyInitialized = 'AlreadyInitialized', Paused = 'Paused', Unauthorized = 'Unauthorized', InsufficientReserves = 'InsufficientReserves', NotLiquidatable = 'NotLiquidatable', NotForSale = 'NotForSale', TooMuchSlippage = 'TooMuchSlippage', SupplyCapExceeded = 'SupplyCapExceeded', NotCollateralized = 'NotCollateralized', BorrowTooSmall = 'BorrowTooSmall', NotPermitted = 'NotPermitted', InvalidPayment = 'InvalidPayment', UnknownAsset = 'UnknownAsset', DebuggingDisabled = 'DebuggingDisabled' };

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type CollateralConfigurationInput = { asset_id: string, price_feed: ContractIdInput, decimals: BigNumberish, borrow_collateral_factor: BigNumberish, liquidate_collateral_factor: BigNumberish, liquidation_penalty: BigNumberish, supply_cap: BigNumberish, paused: boolean };
export type CollateralConfigurationOutput = { asset_id: string, price_feed: ContractIdOutput, decimals: number, borrow_collateral_factor: BN, liquidate_collateral_factor: BN, liquidation_penalty: BN, supply_cap: BN, paused: boolean };
export type CollateralConfigurationEventInput = { configuration: CollateralConfigurationInput };
export type CollateralConfigurationEventOutput = { configuration: CollateralConfigurationOutput };
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type I256Input = { value: BigNumberish, negative: boolean };
export type I256Output = { value: BN, negative: boolean };
export type MarketBasicsInput = { base_supply_index: BigNumberish, base_borrow_index: BigNumberish, tracking_supply_index: BigNumberish, tracking_borrow_index: BigNumberish, total_supply_base: BigNumberish, total_borrow_base: BigNumberish, last_accrual_time: BigNumberish };
export type MarketBasicsOutput = { base_supply_index: BN, base_borrow_index: BN, tracking_supply_index: BN, tracking_borrow_index: BN, total_supply_base: BN, total_borrow_base: BN, last_accrual_time: BN };
export type PauseConfigurationInput = { supply_paused: boolean, withdraw_paused: boolean, absorb_paused: boolean, buy_paused: boolean, claim_paused: boolean };
export type PauseConfigurationOutput = PauseConfigurationInput;
export type UserBasicInput = { principal: I256Input, base_tracking_index: BigNumberish, base_tracking_accrued: BigNumberish, reward_claimed: BigNumberish };
export type UserBasicOutput = { principal: I256Output, base_tracking_index: BN, base_tracking_accrued: BN, reward_claimed: BN };
export type UserBasicEventInput = { user_basic: UserBasicInput, address: AddressInput };
export type UserBasicEventOutput = { user_basic: UserBasicOutput, address: AddressOutput };
export type UserCollateralEventInput = { address: AddressInput, asset_id: string, amount: BigNumberish };
export type UserCollateralEventOutput = { address: AddressOutput, asset_id: string, amount: BN };

export type MarketAbiConfigurables = {
  GOVERNOR: AddressInput;
  PAUSE_GUARDIAN: AddressInput;
  BASE_TOKEN: string;
  BASE_TOKEN_DECIMALS: BigNumberish;
  BASE_TOKEN_PRICE_FEED: ContractIdInput;
  KINK: BigNumberish;
  SUPPLY_PER_SECOND_INTEREST_RATE_SLOPE_LOW: BigNumberish;
  SUPPLY_PER_SECOND_INTEREST_RATE_SLOPE_HIGH: BigNumberish;
  BORROW_PER_SECOND_INTEREST_RATE_SLOPE_LOW: BigNumberish;
  BORROW_PER_SECOND_INTEREST_RATE_SLOPE_HIGH: BigNumberish;
  BORROW_PER_SECOND_INTEREST_RATE_BASE: BigNumberish;
  STORE_FRONT_PRICE_FACTOR: BigNumberish;
  BASE_TRACKING_SUPPLY_SPEED: BigNumberish;
  BASE_TRACKING_BORROW_SPEED: BigNumberish;
  BASE_MIN_FOR_REWARDS: BigNumberish;
  BASE_BORROW_MIN: BigNumberish;
  TARGET_RESERVES: BigNumberish;
  DEBUG_STEP: BigNumberish;
};

interface MarketAbiInterface extends Interface {
  functions: {
    absorb: FunctionFragment;
    add_collateral_asset: FunctionFragment;
    available_to_borrow: FunctionFragment;
    balance_of: FunctionFragment;
    buy_collateral: FunctionFragment;
    claim: FunctionFragment;
    collateral_value_to_sell: FunctionFragment;
    debug_increment_timestamp: FunctionFragment;
    get_borrow_rate: FunctionFragment;
    get_collateral_configurations: FunctionFragment;
    get_collateral_reserves: FunctionFragment;
    get_market_basics: FunctionFragment;
    get_reserves: FunctionFragment;
    get_reward_owed: FunctionFragment;
    get_reward_token_asset_id: FunctionFragment;
    get_supply_rate: FunctionFragment;
    get_user_basic: FunctionFragment;
    get_user_collateral: FunctionFragment;
    get_user_supply_borrow: FunctionFragment;
    get_utilization: FunctionFragment;
    is_liquidatable: FunctionFragment;
    pause: FunctionFragment;
    pause_collateral_asset: FunctionFragment;
    quote_collateral: FunctionFragment;
    resume_collateral_asset: FunctionFragment;
    supply_base: FunctionFragment;
    supply_collateral: FunctionFragment;
    totals_collateral: FunctionFragment;
    withdraw_base: FunctionFragment;
    withdraw_collateral: FunctionFragment;
    withdraw_reserves: FunctionFragment;
    withdraw_reward_token: FunctionFragment;
  };
}

export class MarketAbi extends Contract {
  interface: MarketAbiInterface;
  functions: {
    absorb: InvokeFunction<[accounts: Vec<AddressInput>], void>;
    add_collateral_asset: InvokeFunction<[configuration: CollateralConfigurationInput], void>;
    available_to_borrow: InvokeFunction<[account: AddressInput], BN>;
    balance_of: InvokeFunction<[asset: string], BN>;
    buy_collateral: InvokeFunction<[asset_id: string, min_amount: BigNumberish, recipient: AddressInput], void>;
    claim: InvokeFunction<[], void>;
    collateral_value_to_sell: InvokeFunction<[asset_id: string, collateral_amount: BigNumberish], BN>;
    debug_increment_timestamp: InvokeFunction<[], void>;
    get_borrow_rate: InvokeFunction<[utilization: BigNumberish], BN>;
    get_collateral_configurations: InvokeFunction<[], Vec<CollateralConfigurationOutput>>;
    get_collateral_reserves: InvokeFunction<[asset_id: string], I256Output>;
    get_market_basics: InvokeFunction<[], MarketBasicsOutput>;
    get_reserves: InvokeFunction<[], I256Output>;
    get_reward_owed: InvokeFunction<[account: AddressInput], BN>;
    get_reward_token_asset_id: InvokeFunction<[], string>;
    get_supply_rate: InvokeFunction<[utilization: BigNumberish], BN>;
    get_user_basic: InvokeFunction<[account: AddressInput], UserBasicOutput>;
    get_user_collateral: InvokeFunction<[address: AddressInput, asset_id: string], BN>;
    get_user_supply_borrow: InvokeFunction<[account: AddressInput], [BN, BN]>;
    get_utilization: InvokeFunction<[], BN>;
    is_liquidatable: InvokeFunction<[account: AddressInput], boolean>;
    pause: InvokeFunction<[pause_config: PauseConfigurationInput], void>;
    pause_collateral_asset: InvokeFunction<[asset_id: string], void>;
    quote_collateral: InvokeFunction<[asset_id: string, base_amount: BigNumberish], BN>;
    resume_collateral_asset: InvokeFunction<[asset_id: string], void>;
    supply_base: InvokeFunction<[], void>;
    supply_collateral: InvokeFunction<[], void>;
    totals_collateral: InvokeFunction<[asset_id: string], BN>;
    withdraw_base: InvokeFunction<[amount: BigNumberish], void>;
    withdraw_collateral: InvokeFunction<[asset_id: string, amount: BigNumberish], void>;
    withdraw_reserves: InvokeFunction<[to: AddressInput, amount: BigNumberish], void>;
    withdraw_reward_token: InvokeFunction<[recipient: AddressInput, amount: BigNumberish], void>;
  };
}
